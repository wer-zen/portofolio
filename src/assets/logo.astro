---
// This is a new Astro component (ThreeScene.astro)
import logoz from "./logo.svg"; // Changed from * as logoz to default import
---

<script type="importmap">
    {
        "imports": {
            "three": "https://unpkg.com/three@0.156.0/build/three.module.js"
        }
    }
</script>
<div id="three-container" data-logo-url={logoz}></div>
<script type="module">
    // Import using the import map
    import * as THREE from "three";
    import { SVGLoader } from "https://unpkg.com/three@0.156.0/examples/jsm/loaders/SVGLoader.js";
    // Set up the scene, camera, and renderer
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
        75,
        800 / 600, // Use container dimensions instead of window
        0.1,
        1000,
    );
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(800, 600); // Match container size

    // Ensure the element exists before appending
    const container = document.getElementById("three-container");
    if (container) {
        container.appendChild(renderer.domElement);
    } else {
        console.error("Three.js container not found!");
        // Exit early if container not found
        throw new Error("Container not found");
    }

    // Get the logo URL from the data attribute
    const logoUrl = container.getAttribute("data-logo-url");

    if (!logoUrl) {
        console.error("Logo URL not found!");
        // Add a fallback cube if logo fails
        const geometry = new THREE.BoxGeometry(50, 50, 50);
        const material = new THREE.MeshPhongMaterial({ color: 0x00ff00 });
        const cube = new THREE.Mesh(geometry, material);
        scene.add(cube);
    } else {
        // Load the SVG using SVGLoader
        const loader = new SVGLoader();
        loader.load(
            logoUrl, // Use logoUrl instead of logoz
            function (data) {
                console.log("SVG loaded successfully", data);
                const paths = data.paths;
                const material = new THREE.MeshPhongMaterial({
                    color: 0x333333, // Changed to dark gray for better visibility
                    side: THREE.DoubleSide,
                });

                paths.forEach((path) => {
                    const shapes = path.toShapes(true);
                    const extrudeSettings = { depth: 10, bevelEnabled: false };
                    const extrudedGeometry = new THREE.ExtrudeGeometry(
                        shapes,
                        extrudeSettings,
                    );
                    const mesh = new THREE.Mesh(extrudedGeometry, material);
                    scene.add(mesh);
                });

                // Center the loaded geometry
                const box = new THREE.Box3().setFromObject(scene);
                const center = box.getCenter(new THREE.Vector3());
                scene.children.forEach((child) => {
                    if (child.type === "Mesh") {
                        child.position.sub(center);
                    }
                });
            },
            function (progress) {
                console.log("Loading progress:", progress);
            },
            function (error) {
                console.error("Error loading SVG:", error);
                // Add fallback cube on error
                const geometry = new THREE.BoxGeometry(50, 50, 50);
                const material = new THREE.MeshPhongMaterial({
                    color: 0xff0000,
                });
                const cube = new THREE.Mesh(geometry, material);
                scene.add(cube);
            },
        );
    }

    // Set up camera position
    camera.position.z = 200;

    // Add lighting - WHITE light, not black!
    const light = new THREE.PointLight(0xffffff, 2, 1000);
    light.position.set(200, 200, 200);
    scene.add(light);

    // Add ambient light for better visibility
    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
    scene.add(ambientLight);

    // Animation loop
    const animate = function () {
        requestAnimationFrame(animate);

        // Rotate objects in the scene (skip lights)
        scene.children.forEach((child) => {
            if (child.type === "Mesh") {
                child.rotation.x += 0.01;
                child.rotation.y += 0.01;
            }
        });

        renderer.render(scene, camera);
    };
    animate();
</script>
<style>
    #three-container {
        width: 800px;
        height: 600px;
        border: 1px solid #ccc; /* Add border to see container boundaries */
    }
</style>
